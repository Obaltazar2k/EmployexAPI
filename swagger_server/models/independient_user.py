# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.certification import Certification  # noqa: F401,E501
from swagger_server.models.education import Education  # noqa: F401,E501
from swagger_server.models.laboral_experience import LaboralExperience  # noqa: F401,E501
from swagger_server.models.section import Section  # noqa: F401,E501
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server import util


class IndependientUser(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, surnames: str=None, name: str=None, ocupation: str=None, persoanl_description: str=None, user: User=None, education: List[Education]=None, laboral_experience: List[LaboralExperience]=None, certification: List[Certification]=None, section: List[Section]=None):  # noqa: E501
        """IndependientUser - a model defined in Swagger

        :param surnames: The surnames of this IndependientUser.  # noqa: E501
        :type surnames: str
        :param name: The name of this IndependientUser.  # noqa: E501
        :type name: str
        :param ocupation: The ocupation of this IndependientUser.  # noqa: E501
        :type ocupation: str
        :param persoanl_description: The persoanl_description of this IndependientUser.  # noqa: E501
        :type persoanl_description: str
        :param user: The user of this IndependientUser.  # noqa: E501
        :type user: User
        :param education: The education of this IndependientUser.  # noqa: E501
        :type education: List[Education]
        :param laboral_experience: The laboral_experience of this IndependientUser.  # noqa: E501
        :type laboral_experience: List[LaboralExperience]
        :param certification: The certification of this IndependientUser.  # noqa: E501
        :type certification: List[Certification]
        :param section: The section of this IndependientUser.  # noqa: E501
        :type section: List[Section]
        """
        self.swagger_types = {
            'surnames': str,
            'name': str,
            'ocupation': str,
            'persoanl_description': str,
            'user': User,
            'education': List[Education],
            'laboral_experience': List[LaboralExperience],
            'certification': List[Certification],
            'section': List[Section]
        }

        self.attribute_map = {
            'surnames': 'surnames',
            'name': 'name',
            'ocupation': 'ocupation',
            'persoanl_description': 'persoanl_description',
            'user': 'user',
            'education': 'education',
            'laboral_experience': 'laboral_experience',
            'certification': 'certification',
            'section': 'section'
        }
        self._surnames = surnames
        self._name = name
        self._ocupation = ocupation
        self._persoanl_description = persoanl_description
        self._user = user
        self._education = education
        self._laboral_experience = laboral_experience
        self._certification = certification
        self._section = section

    @classmethod
    def from_dict(cls, dikt) -> 'IndependientUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IndependientUser of this IndependientUser.  # noqa: E501
        :rtype: IndependientUser
        """
        return util.deserialize_model(dikt, cls)

    @property
    def surnames(self) -> str:
        """Gets the surnames of this IndependientUser.

        User' surnames  # noqa: E501

        :return: The surnames of this IndependientUser.
        :rtype: str
        """
        return self._surnames

    @surnames.setter
    def surnames(self, surnames: str):
        """Sets the surnames of this IndependientUser.

        User' surnames  # noqa: E501

        :param surnames: The surnames of this IndependientUser.
        :type surnames: str
        """

        self._surnames = surnames

    @property
    def name(self) -> str:
        """Gets the name of this IndependientUser.

        User's name  # noqa: E501

        :return: The name of this IndependientUser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IndependientUser.

        User's name  # noqa: E501

        :param name: The name of this IndependientUser.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ocupation(self) -> str:
        """Gets the ocupation of this IndependientUser.

        Actual job  # noqa: E501

        :return: The ocupation of this IndependientUser.
        :rtype: str
        """
        return self._ocupation

    @ocupation.setter
    def ocupation(self, ocupation: str):
        """Sets the ocupation of this IndependientUser.

        Actual job  # noqa: E501

        :param ocupation: The ocupation of this IndependientUser.
        :type ocupation: str
        """

        self._ocupation = ocupation

    @property
    def persoanl_description(self) -> str:
        """Gets the persoanl_description of this IndependientUser.

        Short description of the user  # noqa: E501

        :return: The persoanl_description of this IndependientUser.
        :rtype: str
        """
        return self._persoanl_description

    @persoanl_description.setter
    def persoanl_description(self, persoanl_description: str):
        """Sets the persoanl_description of this IndependientUser.

        Short description of the user  # noqa: E501

        :param persoanl_description: The persoanl_description of this IndependientUser.
        :type persoanl_description: str
        """

        self._persoanl_description = persoanl_description

    @property
    def user(self) -> User:
        """Gets the user of this IndependientUser.


        :return: The user of this IndependientUser.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user: User):
        """Sets the user of this IndependientUser.


        :param user: The user of this IndependientUser.
        :type user: User
        """

        self._user = user

    @property
    def education(self) -> List[Education]:
        """Gets the education of this IndependientUser.

        Education registered by the user  # noqa: E501

        :return: The education of this IndependientUser.
        :rtype: List[Education]
        """
        return self._education

    @education.setter
    def education(self, education: List[Education]):
        """Sets the education of this IndependientUser.

        Education registered by the user  # noqa: E501

        :param education: The education of this IndependientUser.
        :type education: List[Education]
        """

        self._education = education

    @property
    def laboral_experience(self) -> List[LaboralExperience]:
        """Gets the laboral_experience of this IndependientUser.

        Laboral experiences registered by the user  # noqa: E501

        :return: The laboral_experience of this IndependientUser.
        :rtype: List[LaboralExperience]
        """
        return self._laboral_experience

    @laboral_experience.setter
    def laboral_experience(self, laboral_experience: List[LaboralExperience]):
        """Sets the laboral_experience of this IndependientUser.

        Laboral experiences registered by the user  # noqa: E501

        :param laboral_experience: The laboral_experience of this IndependientUser.
        :type laboral_experience: List[LaboralExperience]
        """

        self._laboral_experience = laboral_experience

    @property
    def certification(self) -> List[Certification]:
        """Gets the certification of this IndependientUser.

        Certifications taken by the user  # noqa: E501

        :return: The certification of this IndependientUser.
        :rtype: List[Certification]
        """
        return self._certification

    @certification.setter
    def certification(self, certification: List[Certification]):
        """Sets the certification of this IndependientUser.

        Certifications taken by the user  # noqa: E501

        :param certification: The certification of this IndependientUser.
        :type certification: List[Certification]
        """

        self._certification = certification

    @property
    def section(self) -> List[Section]:
        """Gets the section of this IndependientUser.

        Sections published by the user  # noqa: E501

        :return: The section of this IndependientUser.
        :rtype: List[Section]
        """
        return self._section

    @section.setter
    def section(self, section: List[Section]):
        """Sets the section of this IndependientUser.

        Sections published by the user  # noqa: E501

        :param section: The section of this IndependientUser.
        :type section: List[Section]
        """

        self._section = section
