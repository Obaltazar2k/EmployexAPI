# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Education(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, education_id: str=None, description: str=None, discipline: str=None, end_date: date=None, start_date: date=None, average: float=None, title: str=None, university: str=None):  # noqa: E501
        """Education - a model defined in Swagger

        :param education_id: The education_id of this Education.  # noqa: E501
        :type education_id: str
        :param description: The description of this Education.  # noqa: E501
        :type description: str
        :param discipline: The discipline of this Education.  # noqa: E501
        :type discipline: str
        :param end_date: The end_date of this Education.  # noqa: E501
        :type end_date: date
        :param start_date: The start_date of this Education.  # noqa: E501
        :type start_date: date
        :param average: The average of this Education.  # noqa: E501
        :type average: float
        :param title: The title of this Education.  # noqa: E501
        :type title: str
        :param university: The university of this Education.  # noqa: E501
        :type university: str
        """
        self.swagger_types = {
            'education_id': str,
            'description': str,
            'discipline': str,
            'end_date': date,
            'start_date': date,
            'average': float,
            'title': str,
            'university': str
        }

        self.attribute_map = {
            'education_id': 'educationId',
            'description': 'description',
            'discipline': 'discipline',
            'end_date': 'endDate',
            'start_date': 'startDate',
            'average': 'average',
            'title': 'title',
            'university': 'university'
        }
        self._education_id = education_id
        self._description = description
        self._discipline = discipline
        self._end_date = end_date
        self._start_date = start_date
        self._average = average
        self._title = title
        self._university = university

    @classmethod
    def from_dict(cls, dikt) -> 'Education':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Education of this Education.  # noqa: E501
        :rtype: Education
        """
        return util.deserialize_model(dikt, cls)

    @property
    def education_id(self) -> str:
        """Gets the education_id of this Education.

        Unique identifier of education  # noqa: E501

        :return: The education_id of this Education.
        :rtype: str
        """
        return self._education_id

    @education_id.setter
    def education_id(self, education_id: str):
        """Sets the education_id of this Education.

        Unique identifier of education  # noqa: E501

        :param education_id: The education_id of this Education.
        :type education_id: str
        """

        self._education_id = education_id

    @property
    def description(self) -> str:
        """Gets the description of this Education.

        Talk about what the education is about  # noqa: E501

        :return: The description of this Education.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Education.

        Talk about what the education is about  # noqa: E501

        :param description: The description of this Education.
        :type description: str
        """

        self._description = description

    @property
    def discipline(self) -> str:
        """Gets the discipline of this Education.

        Education's discipline  # noqa: E501

        :return: The discipline of this Education.
        :rtype: str
        """
        return self._discipline

    @discipline.setter
    def discipline(self, discipline: str):
        """Sets the discipline of this Education.

        Education's discipline  # noqa: E501

        :param discipline: The discipline of this Education.
        :type discipline: str
        """

        self._discipline = discipline

    @property
    def end_date(self) -> date:
        """Gets the end_date of this Education.

        Date where the education finished  # noqa: E501

        :return: The end_date of this Education.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: date):
        """Sets the end_date of this Education.

        Date where the education finished  # noqa: E501

        :param end_date: The end_date of this Education.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def start_date(self) -> date:
        """Gets the start_date of this Education.

        Date where the education started  # noqa: E501

        :return: The start_date of this Education.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: date):
        """Sets the start_date of this Education.

        Date where the education started  # noqa: E501

        :param start_date: The start_date of this Education.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def average(self) -> float:
        """Gets the average of this Education.

        Average obtained upon completion of studies  # noqa: E501

        :return: The average of this Education.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average: float):
        """Sets the average of this Education.

        Average obtained upon completion of studies  # noqa: E501

        :param average: The average of this Education.
        :type average: float
        """

        self._average = average

    @property
    def title(self) -> str:
        """Gets the title of this Education.

        Title of studies taken  # noqa: E501

        :return: The title of this Education.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Education.

        Title of studies taken  # noqa: E501

        :param title: The title of this Education.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def university(self) -> str:
        """Gets the university of this Education.

        University where the education was taken  # noqa: E501

        :return: The university of this Education.
        :rtype: str
        """
        return self._university

    @university.setter
    def university(self, university: str):
        """Sets the university of this Education.

        University where the education was taken  # noqa: E501

        :param university: The university of this Education.
        :type university: str
        """
        if university is None:
            raise ValueError("Invalid value for `university`, must not be `None`")  # noqa: E501

        self._university = university
