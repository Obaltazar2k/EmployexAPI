# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Sector(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    AGRICULTURA_PLANTACIONES_U_OTROS_SECTORES_RURALES = "AGRICULTURA, PLANTACIONES, U OTROS SECTORES RURALES"
    ALIMENTACION_BEBIDAS_TABACO = "ALIMENTACION, BEBIDAS, TABACO"
    COMERCIO = "COMERCIO"
    CONSTRUCCION = "CONSTRUCCION"
    EDUCIACION = "EDUCIACION"
    FABRICACION_DE_MATERIAL_DE_TRANSPORTE = "FABRICACION DE MATERIAL DE TRANSPORTE"
    FUNCION_PUBLICA = "FUNCION PUBLICA"
    HOTELERIA_RESTAURACI_N_TURISMO = "HOTELERIA, RESTAURACIÃ“N, TURISMO"
    INDUSTRIAS_QUIMICAS = "INDUSTRIAS QUIMICAS"
    INGENIERIA_MECANICA_Y_ELECTICA = "INGENIERIA MECANICA Y ELECTICA"
    MEDIOS_DE_COMUNICACION_CULTURA_GRAFICOS = "MEDIOS DE COMUNICACION, CULTURA, GRAFICOS"
    MINERIA = "MINERIA"
    PETROLEO_Y_PRODUCCION_DE_GASES_REFINACION_DE_PETROLEO = "PETROLEO Y PRODUCCION DE GASES, REFINACION DE PETROLEO"
    PRODUCCION_DE_MATERIALES_BASICOS = "PRODUCCION DE MATERIALES BASICOS"
    SERVICIOS_DE_CORREO_Y_TELECOMUNICACIONES = "SERVICIOS DE CORREO Y TELECOMUNICACIONES"
    SERVICIOS_DE_SALUD = "SERVICIOS DE SALUD"
    SERVICIOS_FINANCIEROS_SERVICIOS_PROFESIONALES = "SERVICIOS FINANCIEROS, SERVICIOS PROFESIONALES"
    SERVICIOS_PUBLICOS = "SERVICIOS PUBLICOS"
    SILVICULTURA_MADERA_CELULOSA_PAPEL = "SILVICULTURA, MADERA, CELULOSA, PAPEL"
    TEXTILES_VESTIDO_CUERO_CALZADO = "TEXTILES, VESTIDO, CUERO, CALZADO"
    TRANSPORTE = "TRANSPORTE"
    TRANSPORTE_MARITIMO = "TRANSPORTE MARITIMO"
    def __init__(self):  # noqa: E501
        """Sector - a model defined in Swagger

        """
        self.swagger_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt) -> 'Sector':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Sector of this Sector.  # noqa: E501
        :rtype: Sector
        """
        return util.deserialize_model(dikt, cls)
