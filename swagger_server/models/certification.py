# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Certification(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, credential_id: str=None, credential_url: str=None, issuing_company: str=None, expiration_date: date=None, expedition_date: date=None, title: str=None):  # noqa: E501
        """Certification - a model defined in Swagger

        :param credential_id: The credential_id of this Certification.  # noqa: E501
        :type credential_id: str
        :param credential_url: The credential_url of this Certification.  # noqa: E501
        :type credential_url: str
        :param issuing_company: The issuing_company of this Certification.  # noqa: E501
        :type issuing_company: str
        :param expiration_date: The expiration_date of this Certification.  # noqa: E501
        :type expiration_date: date
        :param expedition_date: The expedition_date of this Certification.  # noqa: E501
        :type expedition_date: date
        :param title: The title of this Certification.  # noqa: E501
        :type title: str
        """
        self.swagger_types = {
            'credential_id': str,
            'credential_url': str,
            'issuing_company': str,
            'expiration_date': date,
            'expedition_date': date,
            'title': str
        }

        self.attribute_map = {
            'credential_id': 'credential_id',
            'credential_url': 'credential_url',
            'issuing_company': 'issuing_company',
            'expiration_date': 'expiration_date',
            'expedition_date': 'expedition_date',
            'title': 'title'
        }
        self._credential_id = credential_id
        self._credential_url = credential_url
        self._issuing_company = issuing_company
        self._expiration_date = expiration_date
        self._expedition_date = expedition_date
        self._title = title

    @classmethod
    def from_dict(cls, dikt) -> 'Certification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Certification of this Certification.  # noqa: E501
        :rtype: Certification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credential_id(self) -> str:
        """Gets the credential_id of this Certification.

        Unique identifier of certification  # noqa: E501

        :return: The credential_id of this Certification.
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id: str):
        """Sets the credential_id of this Certification.

        Unique identifier of certification  # noqa: E501

        :param credential_id: The credential_id of this Certification.
        :type credential_id: str
        """

        self._credential_id = credential_id

    @property
    def credential_url(self) -> str:
        """Gets the credential_url of this Certification.

        Certification's url  # noqa: E501

        :return: The credential_url of this Certification.
        :rtype: str
        """
        return self._credential_url

    @credential_url.setter
    def credential_url(self, credential_url: str):
        """Sets the credential_url of this Certification.

        Certification's url  # noqa: E501

        :param credential_url: The credential_url of this Certification.
        :type credential_url: str
        """

        self._credential_url = credential_url

    @property
    def issuing_company(self) -> str:
        """Gets the issuing_company of this Certification.

        Certification issuing company  # noqa: E501

        :return: The issuing_company of this Certification.
        :rtype: str
        """
        return self._issuing_company

    @issuing_company.setter
    def issuing_company(self, issuing_company: str):
        """Sets the issuing_company of this Certification.

        Certification issuing company  # noqa: E501

        :param issuing_company: The issuing_company of this Certification.
        :type issuing_company: str
        """
        if issuing_company is None:
            raise ValueError("Invalid value for `issuing_company`, must not be `None`")  # noqa: E501

        self._issuing_company = issuing_company

    @property
    def expiration_date(self) -> date:
        """Gets the expiration_date of this Certification.

        Date the certification expires  # noqa: E501

        :return: The expiration_date of this Certification.
        :rtype: date
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date: date):
        """Sets the expiration_date of this Certification.

        Date the certification expires  # noqa: E501

        :param expiration_date: The expiration_date of this Certification.
        :type expiration_date: date
        """

        self._expiration_date = expiration_date

    @property
    def expedition_date(self) -> date:
        """Gets the expedition_date of this Certification.

        Date the certification was issued  # noqa: E501

        :return: The expedition_date of this Certification.
        :rtype: date
        """
        return self._expedition_date

    @expedition_date.setter
    def expedition_date(self, expedition_date: date):
        """Sets the expedition_date of this Certification.

        Date the certification was issued  # noqa: E501

        :param expedition_date: The expedition_date of this Certification.
        :type expedition_date: date
        """

        self._expedition_date = expedition_date

    @property
    def title(self) -> str:
        """Gets the title of this Certification.

        Title of the certification taken  # noqa: E501

        :return: The title of this Certification.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Certification.

        Title of the certification taken  # noqa: E501

        :param title: The title of this Certification.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title
