# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.media import Media  # noqa: F401,E501
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_id: str=None, email: str=None, password: str=None, city: str=None, country: str=None, user_status: str='active', profile_photo: Media=None):  # noqa: E501
        """User - a model defined in Swagger

        :param user_id: The user_id of this User.  # noqa: E501
        :type user_id: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param city: The city of this User.  # noqa: E501
        :type city: str
        :param country: The country of this User.  # noqa: E501
        :type country: str
        :param user_status: The user_status of this User.  # noqa: E501
        :type user_status: str
        :param profile_photo: The profile_photo of this User.  # noqa: E501
        :type profile_photo: Media
        """
        self.swagger_types = {
            'user_id': str,
            'email': str,
            'password': str,
            'city': str,
            'country': str,
            'user_status': str,
            'profile_photo': Media
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'user_id': 'userId',
            'email': 'email',
            'password': 'password',
            'city': 'city',
            'country': 'country',
            'user_status': 'user_status',
            'profile_photo': 'profile_photo'
        }
        self._user_id = user_id
        self._email = email
        self._password = password
        self._city = city
        self._country = country
        self._user_status = user_status
        self._profile_photo = profile_photo

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this User.

        Unique identifier of the user  # noqa: E501

        :return: The user_id of this User.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this User.

        Unique identifier of the user  # noqa: E501

        :param user_id: The user_id of this User.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def email(self) -> str:
        """Gets the email of this User.

        User's email  # noqa: E501

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.

        User's email  # noqa: E501

        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self) -> str:
        """Gets the password of this User.

        User's password  # noqa: E501

        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this User.

        User's password  # noqa: E501

        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def city(self) -> str:
        """Gets the city of this User.

        City where the user lives  # noqa: E501

        :return: The city of this User.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this User.

        City where the user lives  # noqa: E501

        :param city: The city of this User.
        :type city: str
        """

        self._city = city

    @property
    def country(self) -> str:
        """Gets the country of this User.

        Country where the user lives  # noqa: E501

        :return: The country of this User.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this User.

        Country where the user lives  # noqa: E501

        :param country: The country of this User.
        :type country: str
        """

        self._country = country

    @property
    def user_status(self) -> str:
        """Gets the user_status of this User.

        User status  # noqa: E501

        :return: The user_status of this User.
        :rtype: str
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status: str):
        """Sets the user_status of this User.

        User status  # noqa: E501

        :param user_status: The user_status of this User.
        :type user_status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if user_status not in allowed_values:
            raise ValueError(
                "Invalid value for `user_status` ({0}), must be one of {1}"
                .format(user_status, allowed_values)
            )

        self._user_status = user_status

    @property
    def profile_photo(self) -> Media:
        """Gets the profile_photo of this User.


        :return: The profile_photo of this User.
        :rtype: Media
        """
        return self._profile_photo

    @profile_photo.setter
    def profile_photo(self, profile_photo: Media):
        """Sets the profile_photo of this User.


        :param profile_photo: The profile_photo of this User.
        :type profile_photo: Media
        """

        self._profile_photo = profile_photo
